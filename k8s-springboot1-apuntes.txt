--crear diagramas
excalidraw.com

--crear proyectos spring boot
https://start.spring.io/

--Levantar mysql con docker compose
--ir a ruta dockercompose
--Ejecutar comando
docker network create --attachable -d bridge mysql_db1_network
docker-compose up -d
docker-compose down

--Para compilar por comando
.\mvnw.cmd clean package

--Para ejecutar aplicacion spring-boot
java -jar <<nombre_jar.jar>>

--generar imagen docker
docker build -t <<nombre_imagen>> .

docker build -t <<nombre_imagen>> . -f ./Dockerfile-ms-usuarios
docker build -t ms-usuarios:v1 . -f ./Dockerfile-ms-usuarios_final
docker build -t ms-cursos:v1 . -f ./Dockerfile-ms-cursos_final

--Comando para obtener imageId
docker images

--Comando para eliminar imagenes por imageId
docker rmi <<imageId1>> <<imageId2>> ...<<imageIdN>>

--Comando para eliminar todos las imagenes que no tenga contenedores creados
docker image prune -a

-- Comando para detener contenedor
docker stop <<container_id>>

--Comando para iniciar un contenedor detenido
docker start <<container_id>>

--Comando para iniciar un contenedor detenido attachado (ver traza de ejecucion)
docker start -a <<container_id>>

--Comando para generar contenedor apartir de imagen generada
docker run -p 8001:8001 --name <<container_name>> <<imageId>>
docker run -p 8001:8001 --name <<container_name>> <<imagenName>>

--Comando para generar contenedor apartir de imagen generada en segundo plano
docker run -d -p 8001:8001 --name <<container_name>> <<imageId>>

--Comando para generar contenedor apartir de imagen generada en segundo plano y al 
--detener que se elimine
docker run -p 8001:8001 -d  --rm  --name <<container_name>> <<imageId>>
--Incluyendo red asociada
docker run -p 8001:8001 -d  --rm  --name <<container_name>> --network <<network_name>> <<imageId>>
docker run -p 8001:8001 -d  --rm  --name ms-usuarios --network vnet_spring ms-usuarios:v1
docker run -p 8002:8002 -d  --rm  --name ms-cursos   --network vnet_spring ms-cursos:v1
--Levantando con variable de entorno del puerto desde comando
docker run -p 8001:8001 -e PORT=8001 -d  --rm  --name ms-usuarios --network vnet_spring ms-usuarios:v1
--Levantando con variable de entorno del puerto desde archivo .env
docker run -p 8001:8001 --env-file ./.env_ms-usuarios -d  --rm  --name ms-usuarios --network vnet_spring ms-usuarios:v1

--Comando para generar contenedor apartir de imagen generada en segundo plano y al 
--detener que se elimine y este modo interactivo
docker run -p 8001:8001 -d  --rm -it   --name <<container_name>> <<imageId>> /bin/sh

--Comando para eliminar contenedores
docker rm <<container_id1>> <<container_id2>> ...<<container_idN>>

--Comando para eliminar todos los contenedores detenidos
docker container prune

--Comando para ver solo contenedores levantados
docker ps

--Comando para ver todos los contenedores 
docker ps -a

--Comando para attachar contenedor a terminal para ver traza en vivo
docker attach <<container_id>>

--Comando para ver logs de contenedor
docker logs <<container_id>>

--Comando para ver logs de contenedor en caliente
docker logs -f <<container_id>>

--Comando para copiar archivos desde local hacia contenedor
docker cp .\Login.java <<container_id>>:/app/Login.java

--Comando para copiar archivos desde contenedor hacia local
docker cp <<container_id>>:/app/Login.java .\Login.java

--Comando copiar logs de contenedor hacia local
docker cp 068f7ea466af:/app/logs ./logs

--Comando para inspeccionar una imagen
docker image inspect <<imageId>>

--Comando para inspeccionar un contenedor
docker container inspect <<container_id>>

--Ver lista de redes desplegadas en docker
docker network ls
--Crear red en docker
docker network create <<network_net>>
docker network create vnet_spring
--Descargar imagen docker
docker pull <<imagen_name>>

--Levantar mysql y postgresql en docker
docker run -d -p 3307:3306 --name mysql8    --network vnet_spring -e MYSQL_ROOT_PASSWORD=sasa -e MYSQL_DATABASE=ms_usuarios -v data-mysql8:/var/lib/mysql              mysql:8
docker run -d -p 5532:5432 --name postgre14 --network vnet_spring -e POSTGRES_PASSWORD=sasa   -e POSTGRES_DB=ms_usuarios    -v data-postgre14:/var/lib/postgresql/data postgres:14-alpine

--Ver volumenes desplegados en docker
docker volume ls

---USO DE ARGUMENTOS PARA ARMAR IMAGENES DOCKER
docker build -t ms-usuarios:v1 . -f ./Dockerfile-generic --build-arg PORT_APP=8001 --build-arg MS_NAME=ms-usuarios --build-arg JAR_NAME=ms-usuarios-0.0.1-SNAPSHOT.jar
docker build -t ms-cursos:v1   . -f ./Dockerfile-generic --build-arg PORT_APP=8002 --build-arg MS_NAME=ms-cursos   --build-arg JAR_NAME=ms-cursos-0.0.1-SNAPSHOT.jar

--USO DE VARIABLES DE ENTORNO PARA DESPLEGAR CONTENEDORES DOCKER
docker run -p 8001:8001 --env-file ./.env_ms-usuarios -d  --rm  --name ms-usuarios --network vnet_spring ms-usuarios:v1
docker run -p 8001:8001 -e PORT=8001
						-e DB_HOST=host.docker.internal:3307
						-e DB_DATABASE=ms_usuarios
						-e DB_USERNAME=root
						-e DB_PASSWORD=sasa 
-d  --rm  --name ms-usuarios --network vnet_spring ms-usuarios:v1

docker run -p 8002:8002 --env-file ./.env_ms-cursos   -d  --rm  --name ms-cursos   --network vnet_spring ms-cursos:v1
docker run -p 8002:8002 -e PORT=8002
						-e DB_HOST=host.docker.internal:5432
						-e DB_DATABASE=ms_cursos
						-e DB_USERNAME=postgres
						-e DB_PASSWORD=postgres
 -d  --rm  --name ms-cursos   --network vnet_spring ms-cursos:v1
 
 
--DOCKER COMPOSE
--Solo construir imagenes
docker-compose build

--Levantar servicios
docker-compose up -d

--Levantar servicios forzando generacion de imagen (en caso se haya cambiado codigo)
docker-compose up --build -d

--Detener y borrar servicios  
docker-compose down

--iniciar servicios
docker-compose start
--Detener servicios
docker-compose stop


--Login en docker hub
docker login (pedir√° usuario y pwd)

--Cerrar sesion en docker hub
docker logout

--Subir imagenes docker propios (requiere login)
-crear tag de imagenes a subir a docker hub
docker tag local-image:tagname new-repo:tagname
docker tag ms-usuarios:v1      mpobletemori/ms-usuarios:v1
docker tag ms-cursos:v1        mpobletemori/ms-cursos:v1
-Subir imagenes a docker hub
docker push new-repo:tagname
docker push mpobletemori/ms-usuarios:v1
docker push mpobletemori/ms-cursos:v1

--Bajar imagenes de docker hub con cuenta propia (no requiere login)
docker pull  <<image_name>>:<<tag>>
docker pull mpobletemori/ms-usuarios:v1
docker pull mpobletemori/ms-cursos:v1


----Kubernete
--ver status de minikube
minikube status

--iniciar minikube
minikube start

--detener minikube
minikube stop

--crear deployment de un pod por comando
kubectl create deployment <<deployment_name>> --image=<<image_name>> --port=<<port_internal>>
kubectl create deployment mysql --image=mysql:latest --port=3307
kubectl create deployment ms-usuarios --image=ms-usuarios:v1 --port=8001
kubectl create deployment ms-cursos   --image=ms-cursos:v1   --port=8002

--crear archivo yml apartir de comando para crear deployment 
kubectl create deployment <<deployment_name>> --image=<<image_name>> --port=<<port_internal>> --dry-run=client -o yaml > <<file_name>>.yaml
kubectl create deployment mysql --image=mysql:latest --port=3307 --dry-run=client -o yaml > deployment-mysql.yaml

--crear deployment apartir de archivo yaml (forma declarativa)
kubectl apply -f <<ruta_y_archivo_yaml>>
kubectl apply -f ./deployment-mysql.yaml
kubectl apply -f ./deployment-ms_usuarios.yaml

--Para desplegar una imagen propio en minukube usar comando
minikube image load <IMAGE_NAME>
minikube image load mpobletemori/ms-usuarios:v1
minikube image load mpobletemori/ms-cursos:v1

--borrar deployment
kubectl delete deployment <<deployment_name>>
kubectl delete deployment mysql8

--ver deployments
kubectl get deployments

--ver detalle de pod levantado
kubectl describe pods <<pod_name>>

--ver pods
kubectl get pods

--ver traza de ejecucion del pod
kubectl logs <<pod_name>>

--Deployment en forma declarativa 
kubectl apply -f ./<<nombre_fichero>>.yaml

--Revisar api deployment temporalmente
kubectl port-forward deployment/<<deployment_name>> <<port_expose>>:<<port_internal>>
kubectl port-forward deployment/ms-usuarios         8001:8001

--Crear servicio de tipo clusterIP para exponer bd 
*ClusterIP=Comunicacion entre pods con ip fija.

*NodePort=Comunicacion desde afuera hacia pods con ip fija y el puerto exponiendo no aplica
  usar en caso de contar un cluster de equipos.
  
*LoadBalancer=Permite comunicacion desde afuera hacia los pods en caso contar con cluster de equipos 
de la infra de kubernetes.
--generando servicio de tipo ClusterIP para exponer BD
kubectl expose deployment <<service_name>> --port=<<port>> --type=<<service_type>>
kubectl expose deployment mysql       --port=3307 --type=ClusterIP
kubectl expose deployment ms-usuarios --port=8001 --type=LoadBalancer
kubectl expose deployment ms-cursos   --port=8002 --type=LoadBalancer

--Obtener url para acceder por el service LoadBalancer
minikube service <<service_name>>

--Ver lista de servicios
kubectl get services
kubectl get svc

--Ver detalle de ejecucion de servicio
kubectl describe service <<nombre de servicio>>

--Ver lista de todos los servicios de kubernete
kubectl get all