--crear diagramas
excalidraw.com

--crear proyectos spring boot
https://start.spring.io/

--Levantar mysql con docker compose
--ir a ruta dockercompose
--Ejecutar comando
docker network create --attachable -d bridge mysql_db1_network
docker-compose up -d
docker-compose down

--Para compilar por comando
.\mvnw.cmd clean package

--Para ejecutar aplicacion spring-boot
java -jar <<nombre_jar.jar>>

--generar imagen docker
docker build -t <<nombre_imagen>> .

docker build -t <<nombre_imagen>> . -f ./Dockerfile-ms-usuarios
docker build -t ms-usuarios:v1 . -f ./Dockerfile-ms-usuarios_final
docker build -t ms-cursos:v1 . -f ./Dockerfile-ms-cursos_final

--Comando para obtener imageId
docker images

--Comando para eliminar imagenes por imageId
docker rmi <<imageId1>> <<imageId2>> ...<<imageIdN>>

--Comando para eliminar todos las imagenes que no tenga contenedores creados
docker image prune

-- Comando para detener contenedor
docker stop <<container_id>>

--Comando para iniciar un contenedor detenido
docker start <<container_id>>

--Comando para iniciar un contenedor detenido attachado (ver traza de ejecucion)
docker start -a <<container_id>>

--Comando para generar contenedor apartir de imagen generada
docker run -p 8001:8001 --name <<container_name>> <<imageId>>
docker run -p 8001:8001 --name <<container_name>> <<imagenName>>

--Comando para generar contenedor apartir de imagen generada en segundo plano
docker run -d -p 8001:8001 --name <<container_name>> <<imageId>>

--Comando para generar contenedor apartir de imagen generada en segundo plano y al 
--detener que se elimine
docker run -p 8001:8001 -d  --rm  --name <<container_name>> <<imageId>>
--Incluyendo red asociada
docker run -p 8001:8001 -d  --rm  --name <<container_name>> --network <<network_name>> <<imageId>>
docker run -p 8001:8001 -d  --rm  --name ms-usuarios --network vnet_spring ms-usuarios:v1
docker run -p 8002:8002 -d  --rm  --name ms-cursos   --network vnet_spring ms-cursos:v1

--Comando para generar contenedor apartir de imagen generada en segundo plano y al 
--detener que se elimine y este modo interactivo
docker run -p 8001:8001 -d  --rm -it   --name <<container_name>> <<imageId>> /bin/sh

--Comando para eliminar contenedores
docker rm <<container_id1>> <<container_id2>> ...<<container_idN>>

--Comando para eliminar todos los contenedores detenidos
docker container prune

--Comando para ver solo contenedores levantados
docker ps

--Comando para ver todos los contenedores 
docker ps -a

--Comando para attachar contenedor a terminal para ver traza en vivo
docker attach <<container_id>>

--Comando para ver logs de contenedor
docker logs <<container_id>>

--Comando para ver logs de contenedor en caliente
docker logs -f <<container_id>>

--Comando para copiar archivos desde local hacia contenedor
docker cp .\Login.java <<container_id>>:/app/Login.java

--Comando para copiar archivos desde contenedor hacia local
docker cp <<container_id>>:/app/Login.java .\Login.java

--Comando copiar logs de contenedor hacia local
docker cp 068f7ea466af:/app/logs ./logs

--Comando para inspeccionar una imagen
docker image inspect <<imageId>>

--Comando para inspeccionar un contenedor
docker container inspect <<container_id>>

--Ver lista de redes desplegadas en docker
docker network ls
--Crear red en docker
docker network create <<network_net>>
docker network create vnet_spring
--Descargar imagen docker
docker pull <<imagen_name>>

--Levantar mysql y postgresql en docker
docker run -d -p 3307:3306 --name mysql8    --network vnet_spring -e MYSQL_ROOT_PASSWORD=sasa -e MYSQL_DATABASE=ms_usuarios -v data-mysql8:/var/lib/mysql              mysql:8
docker run -d -p 5532:5432 --name postgre14 --network vnet_spring -e POSTGRES_PASSWORD=sasa   -e POSTGRES_DB=ms_usuarios    -v data-postgre14:/var/lib/postgresql/data postgres:14-alpine

--Ver volumenes desplegados en docker
docker volume ls

 